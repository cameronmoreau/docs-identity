---
title: Configure Applications
owner: Identity Service
---

This topic explains how Pivotal Cloud Foundry (PCF) developers configure their apps to use the Single Sign-On (SSO) service, write SSO integration into their apps, and use the SSO Admin Client to manage connections between SSO identity providers, apps, users and other resources. 

## <a id='choose-type'></a> Determine Your SSO Application Type

Before you bind or register an app, you must determine its SSO application type.

If your app authenticates end users, its application type is `Web App`, `Native Mobile App`, or `Single-Page JavaScript App`. If the app does not authenticate end users, but rather accesses other services or APIs on its own behalf, then its type is `Service-to-Service App`.

Refer to the table below to determine your app's SSO Application Type and OAuth Grant Type:

| Application Type  | SSO Application Type | OAuth Grant Type Equivalent |
|-------------------|------------------------------|-------------------------------|
| <a href="./web-app.html" class="subnav">Web</a> | `Web App` | `authorization code` |
| <a href="./native-mobile-app.html" class="subnav">Native Mobile, Desktop, or Command Line</a> | `Native Mobile App` | `password` (the resource owner's password) |
| <a href="./single-page-js-app.html" class="subnav">Single-Page JavaScript</a> | `Single-Page JavaScript App` | `implicit` |
| <a href="./service-to-service-app.html" class="subnav">Service-to-Service</a> | `Service-to-Service App` | `client_credentials` |


<p class="note"><strong>Note</strong>: The <code>Native Mobile App</code> application type is intended only for highly-trusted apps such as company-owned and managed applications.</p>

## <a id='internal'></a> Set Up PCF Apps to Use SSO

To configure SSO for an app running internally on PCF, you first need to [determine the SSO application type](#choose-type) of the app that will use the SSO service.

Then you [configure](#configure) your SSO service for the app using environment variables and [bind the app](#bind) to an SSO service instance. These steps are described below.

### <a id='configure'></a> Configure SSO Environment Variables

For a PCF-hosted app to bind to an SSO service instance, it must have the following environment variables set:

* `GRANT_TYPE` - the type of authentication associated with the SSO Application Type in the table [above](#choose-type).
* `SSO_IDENTITY_PROVIDER` - the internal or external identity provider(s) for the app to use.

By setting more environment variables, you can configure how an app uses SSO in additional ways, as [described below](#properties).

You can set environment variables to configure SSO for an app in two ways, as described below: 

* Set the variables [manually](#manual-config), after you deploy the app, in Apps Manager or with the Cloud Foundry Command-Line Interface (cf CLI).

* Include the config settings in the app manifest, so that PCF [bootstraps](#bootstrap) them automatically when it deploys the app.

#### <a id='manual-config'></a> Manually Configure Apps for SSO

For apps already deployed to PCF, you can set their `GRANT_TYPE`, `SSO_IDENTITY_PROVIDER`, and other SSO configuration environment variables with the [`cf set-env`](http://cli.cloudfoundry.org/en-US/cf/set-env.html) command, or else in Apps Manager as follows:

1. Log in to Apps Manager at `https://apps.YOUR-SYSTEM-DOMAIN`.

1. Navigate to your application.

1. Click the **Env Variables** tab.

1. Click **Add an Env Variable**.

1. For **Variable Name** enter the name of the [SSO configuration property](#properties) that you are setting, such as `GRANT_TYPE`.

1. For **Value**, enter the property value. For example, to set the `GRANT_TYPE` property for a Single-Page JavaScript App, enter `implicit`, which is the OAuth Grant Type listed for your [SSO application type](#choose-type) above.

1. Bind and restage your application.
	
### <a id='bootstrap'></a> Bootstrap SSO Configuration

Beginning in SSO 1.4.0, you can include SSO configuration values in your app manifest to bootstrap client configurations for your applications automatically when binding or rebinding your application to the service instance. These values will be automatically populated to the client configurations for your application through CF environment variables, and you will not have to configure environment variables after deploying your app.

When you specify your own scopes and authorities, consider including openid for scopes on auth code, implicit, and password grant type applications, and uaa.resource for client credentials grant type applications, as these will not be provided if they are not specified.

This snippet below shows how to include `GRANT_TYPE` `SSO_IDENTITY_PROVIDERS` in your manifest. The [table below](#properties) lists all of the SSO properties you can set in your app manifest.

<pre class="code">
---
applications:
  - name: APPLICATION NAME
    env:
      GRANT_TYPE: OAUTH GRANT TYPE
      SSO_IDENTITY_PROVIDERS: COMMA SEPARATED LIST OF IDENTITY PROVIDERS
	</pre>

<p class="note"><strong>Note</strong>: If you do not provide a <code>GRANT_TYPE</code>, the application type defaults to Web App. If you do not provide any <code>SSO_IDENTITY_PROVIDERS</code>, the internal user store will be selected by default.</p> 

### <a id='properties'></a> SSO Configuration Properties

The table below provides a description and the default values for the environment variables that an app can use to configure SSO. Further details and examples are provided in the sample application manifests.

| Property Name | Description | Default |
| ------------- | ------------- | ------------- |
| name | Name of the application | (N/A - Required Value) |
| GRANT\_TYPE | Allowed grant type for the application through the SSO service - only one grant type per application is supported by SSO | (N/A - You must specify the value) |
| SSO\_IDENTITY_PROVIDERS | Allowed identity providers for the application through the SSO service plan | Yes |
| SSO\_REDIRECT\_URIS | Comma separated whitelist of redirection URIs allowed for the application - Each value must start with http:// or https:// |  (Will always include the application route) |
| SSO\_SCOPES | Comma separated list of scopes that belong to the application and are registered as client scopes with the SSO service. This value is ignored for client credential grant type applications. |  openid |
| SSO\_AUTO\_APPROVED\_SCOPES | Comma separated list of scopes that the application is automatically authorized when acting on behalf of users through SSO service | (Defaults to existing scopes/authorities) |
| SSO\_AUTHORITIES | Comma separated list of authorities that belong to the application and are registered as client authorities with the SSO service - privileged identity zone/plan administrator scopes (e.g. scim.read, idps.write) cannot be bootstrapped and must be assigned by zone/plan administrators. This value is ignored for any grant type other than client credentials. | uaa.resource |
| SSO\_REQUIRED\_USER\_GROUPS | Comma separated list of groups a user must have in order to authenticate successfully for the application | (No value) |
| SSO\_ACCESS\_TOKEN\_LIFETIME | Lifetime in seconds for the access token issued to the application by the SSO service | 43200 |
| SSO\_REFRESH\_TOKEN\_LIFETIME | Lifetime in seconds for the refresh token issued to the application by the SSO service | 2592000 (not used for client credentials) |
| SSO\_RESOURCES |  Resources that the application will use as scopes/authorities for the SSO service to be created during bootstrapping if they do not already exist - The input format can be referenced in the provided sample manifest| (No value) |
| SSO\_ICON |  Application icon that will be displayed next to the application name on the Pivotal Account dashboard if show on home page is enabled - do not exceed 64kb | (No value) |
| SSO\_LAUNCH\_URL |  Application launch URL that will be used for the application on the Pivotal Account dashboard if show on home page is enabled | (Application route) |
| SSO\_SHOW\_ON\_HOME\_PAGE |  If set to true, the application will appear on the Pivotal Account dashboard with the corresponding icon and launch URL| True |

Additional information and manifest examples are available on the [identity sample applications](https://github.com/pivotal-cf/identity-sample-apps). 

#### Remove SSO Environment Variables

You can remove any environment variables set through bootstrapping, `cf set-env`, or Apps Manager as follows:

1. Run `cf unset-env APP_NAME PROPERTY_NAME`.

1. Rebind the application.

### <a id='bind'></a> Bind an Application Hosted on PCF

1. Log in to Apps Manager as a Space Developer.
1. Select the space where your application runs.
1. Under **Applications**, click the name of your application.
1. Click the **Services** tab.
1. Click **Bind a Service**.
1. Bind your application to a service to create an associated OAuth Client.
	 1. Select an existing SSO service instance from the dropdown menu and click **Bind**.
	 1. Create a new service instance:
	 	2. Click **or add from Marketplace**.
		3. Select the **Single Sign-On** service under Services Marketplace.
		4. Select a Service Plan, then click **Select this plan**.
		5. Enter an **Instance Name**, select a space, select an app, then click **Add**.
1. Click **Manage** under the SSO service instance to launch the SSO dashboard.
1. Click your application.
1. Specify a value in the **App Launch URL** field that you want to set as the address of your application.
1. Upload an app icon for your application.
1. Click **Show on homepage** to display the application on the UAA or Pivotal Account home page.
	<p class="note"><strong>Note</strong>: If you would like application to display on the home page, you must enter an **App Launch URL** or upload an app icon.</p> 
1. Select one or more **Identity Providers** for your application. Internal User Store is the default.
<p class="note"><strong>Note</strong>: When registering an externally hosted application, a Space Developer can choose from internal and external identity providers. If the Space Developer selects multiple identity providers, users must select which provider to use when they sign in. This option is available for all application types except <code>Service-to-Service App</code>.</p>
1. If your Application Type is `Web App` or `Single-Page JavaScript App`, enter a whitelist of **Auth Redirect URIs** beneath **Redirect URIs**. The redirect query parameter specified on the OAuth request must match the URIs specified in this list. Otherwise, SSO rejects the request.
1. For the **Scopes** field, specify the permissions that the application can request on the user’s behalf. This field defaults to `openid` for Web, Native Mobile, and Single-Page JavaScript Apps. This field defaults to `uaa.resource` for Service-to-Service Apps. If this application is purely for authentication purposes, then the `openid` scope is sufficient. If the application makes API calls on behalf of the end user, you must specify both the scopes enforced by the API and the scopes to be requested by the application.

	| Scope  | Description |
	|-------------------|------------------------------|
	| `openid` | Provides access to make OpenID Connect requests |
	| `user_attributes` | Provides access to custom attributes from an external identity provider |
	| `roles` | Provides access to external groups from an identity provider |
	| `uaa.resource` | Provides access to the check_token endpoint for service-to-service flows |

<p class="note"><strong>Note</strong>: Under <strong>Scopes</strong>, you can select resources defined in any space if the application type is a <code>Web App</code>, <code>Native Mobile App</code>, or <code>Single-Page JavaScript App</code>. If the application type is a <code>Service-to-Service App</code>, you can only select resources defined within the space.</p>
1. For **Auto-Approved Scopes**, select any scopes that the SSO service automatically approves when the app makes a request on behalf of a user. Select only scopes pertaining to applications owned and managed by your company. Do not select scopes that pertain to applications external to PCF.
1. Click **Save Config**. The **Next Steps** page appears, describing the endpoints required for application integration. Refer to the <a href="#app-integration">Integrate SSO with Applications</a> section below for more details.

## <a id='register'></a> Register an External Application

1. [Determine the type](#choose-type) of the app that will use the SSO service.

1. Log in to Apps Manager as a Space Developer.
1. Select the space where your service instance is located.
1. Under **Services**, click **Manage** next to the SSO service instance. This launches  the SSO dashboard.
1. Click **New App**.
1. Enter an **App Name**.
1. Choose an application type under **Select an Application Type**.
1. Enter an **App Launch URL** that specifies the address of your application.
1. Upload an app icon for your application.
1. Click **Show on homepage** to display the application on the UAA or Pivotal Account home page.
	<p class="note"><strong>Note</strong>: To display the application on the home page, you must enter an **App Launch URL** or Upload an app icon.</p> 
1. Select one or more **Identity Providers** for your application. Internal User Store is the default.
	<p class="note"><strong>Note</strong>: When registering an externally hosted application, a Space Developer can choose from internal and external identity providers. If the Space Developer selects multiple identity providers, users must select which provider to use when they sign in. This option is available for all application types except <code>Service-to-Service App</code>.</p>
1. If your Application Type is `Web App` or `Single-Page JavaScript App`, enter a whitelist of **Auth Redirect URIs** beneath **Redirect URIs**. The redirect query parameter specified on the OAuth request must match the URIs specified in this list. Otherwise, SSO rejects the request.
1. For the **Scopes** field, specify the permissions that the application can request on the user’s behalf. This field defaults to `openid` for Web, Native Mobile, and Single-Page JavaScript Apps. This field defaults to `uaa.resource` for Service-to-Service Apps. If this application is purely for authentication purposes, then the `openid` scope is sufficient. If the application makes API calls on behalf of the end user, you must specify both the scopes enforced by the API and the scopes to be requested by the application.

	| Scope  | Description |
	|-------------------|------------------------------|
	| `openid` | Provides access to make OpenID Connect requests |
	| `user_attributes` | Provides access to custom attributes from an external identity provider |
	| `roles` | Provides access to external groups from an identity provider |
	| `uaa.resource` | Provides access to check_token endpoint for service-to-service flows |
<p class="note"><strong>Note</strong>: Add the <code>user_attributes</code> scope to the client scopes to return user attributes from the ID token.</p>
<p class="note"><strong>Note</strong>: Under <strong>Scopes</strong>, you can select resources defined in any space if the application type is a <code>Web App</code>, <code>Native Mobile App</code>, or <code>Single-Page JavaScript App</code>. If the application type is a <code>Service-to-Service App</code>, you can only select resources defined within the space.</p>
1. For **Auto-Approved Scopes**, select any scopes that the SSO service automatically approves when the app makes a request on behalf of a user. Select only scopes pertaining to applications owned and managed by your company. Do not select scopes that pertain to applications external to PCF.
1. Click **Create App**. The **Next Steps** page appears, describing the endpoints required for application integration. Refer to the <a href="#app-integration">Integrate SSO with Applications</a> section below for more details.

## <a id="app-integration"></a>Integrate SSO with Applications

Because SSO service is based on the OAuth protocol, your applications must be OAuth-aware.

### Java Applications 

If you are using Java, refer to the [Single Sign-On Service Sample Applications](https://github.com/pivotal-cf/identity-sample-apps). These are sample applications created using [Spring Boot](https://projects.spring.io/spring-boot/) for all four [application types](#choose-type). These applications use the SSO Service Connector, which auto-configures the application for OAuth. After binding the application to an SSO service instance, you must restart the application for the new SSO configuration to take effect.

### Non-Java Applications

To configure non-Java applications for OAuth, supply the following properties as environment variables to your application after the SSO service bind. You can view this information on the **Next Steps** page of the SSO dashboard.

* **App ID**, also known as OAuth Client ID
* **App Secret**, also known as OAuth Client Secret
* **OAuth Authorization URL**, the endpoint for client authorization
* **OAuth Token URL**, the endpoint for token retrieval

To validate the token, you must verify the following:

1. The token is a properly signed JSON Web Token with an appropriate public key. The key can be downloaded from the **Token Verification Key** endpoint specified on the **Next Steps** page.

2. The value of `aud` in the token matches your **App ID**.

3. The value of `iss` matches `https://AUTH-DOMAIN.uaa.YOUR-SYSTEM-DOMAIN/oauth/token`.

4. The expiry time of the token, `exp`, has not passed.

## <a id='admin'></a> Create Admin Client

You can create an admin client to perform administrative functions, such as manage  identity providers, applications, users, groups, and resources in a specific zone where you create the client. 

To create an admin client, complete the following steps:

1. Log in to Apps Manager.
2. Select the space where your service instance is located. This specifies the zone you manage as an admin client.
3. Under **Services**, click the **Single Sign-On** service.
4. Click **Manage** next to your SSO service instance to launch the SSO dashboard.
5. Click **New App**.
6. Enter an **App Name**.
7. Under **Select an Application Type**, select **Service-to-Service App**.
8. Click **Select Scopes** and choose what actions the admin client can perform from the following **Admin Permissions**:

	| Scope  | Description |
	|-------------------|------------------------------|
	| `clients.admin` | Provides superuser access to create, modify, and delete clients |
	| `clients.read` | Provides access to read information about clients |
	| `clients.write` | Provides access to create and modify clients |
	| `scim.create` | Provides access to create users |
	| `scim.read` | Provides access to read information about users and group memberships |
	| `scim.write` | Provides access to create, modify, and delete users and group memberships |
	| `idps.read` | Provides access to read information about identity providers |
	| `idps.write` | Provides access to create, modify, and delete identity providers |

9. Click **Create App**.

## <a id='delete'></a> Delete Application

Complete the procedure that corresponds with your application type.

### Delete a PCF Application

To delete an application hosted on PCF, complete the following steps:

1. Log in to Apps Manager as a Space Developer.
1. Select the space where your application is located.
1. Under **Applications**, click the name of your application.
1. On the Application Page, click **Delete App**.
1. On the popup, click **Delete** to confirm that you want to delete the application and its configurations from Apps Manager and the service dashboard.

### Delete an External Application

To delete an external application not hosted on PCF, complete the following steps:

1. Log in to Apps Manager as a Space Developer.
1. Select the space where your service instance is located.
2. Under **Services**, click **Manage** next to your SSO service instance to launch the SSO dashboard.
3. Click your application.
4. Click **Delete** at the bottom of the page.
5. On the popup, click **Delete App** to confirm that you want to delete the application and its configurations.

	<p class="note"><strong>Note</strong>: Deleting an externally hosted application removes the application and its configurations from the SSO dashboard. However, it still exists on your hosted platform.</p>
